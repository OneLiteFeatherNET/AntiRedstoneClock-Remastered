---
# Minecraft Version Testing Workflow
# 
# This workflow tests the AntiRedstoneClock-Remastered plugin against multiple 
# Minecraft Paper versions to ensure compatibility and catch potential exceptions.
#
# Features:
# - Matrix testing across supported Minecraft versions
# - Plugin build verification 
# - Critical exception detection during startup
# - Unit test execution
# - Artifact collection for debugging
# - Scheduled weekly testing
#
# The workflow helps maintain plugin quality by catching compatibility issues
# early in the development process.

name: Minecraft Version Tests

on:
  push:
    branches: [main, next]
  pull_request:
    branches: [main, next]
  schedule:
    # Run tests weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  minecraft-version-test:
    if: github.repository_owner == 'OneLiteFeatherNET'
    name: Test Plugin on Minecraft ${{ matrix.minecraft-version }}
    runs-on: ubuntu-latest
    env:
      ONELITEFEATHER_MAVEN_USERNAME: ${{ secrets.ONELITEFEATHER_MAVEN_USERNAME }}
      ONELITEFEATHER_MAVEN_PASSWORD: ${{ secrets.ONELITEFEATHER_MAVEN_PASSWORD }}
    strategy:
      fail-fast: false
      matrix:
        # Test on specific Minecraft versions that are actively supported
        minecraft-version:
          - "1.20.6"
          - "1.21"
          - "1.21.3"
          - "1.21.4"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build Plugin
        run: ./gradlew clean build shadowJar

      - name: Test Plugin on Minecraft ${{ matrix.minecraft-version }}
        run: |
          echo "Testing plugin on Minecraft version ${{ matrix.minecraft-version }}"
          
          # Use the new buildSrc task instead of bash scripts
          ./gradlew "testServer-${{ matrix.minecraft-version }}"

      - name: Run Unit Tests
        run: ./gradlew test

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plugin-build-${{ matrix.minecraft-version }}
          path: |
            build/libs/*.jar
            run-${{ matrix.minecraft-version }}/logs/
            run-${{ matrix.minecraft-version }}/log4j2.xml
            build/reports/tests/test/
          retention-days: 7

  test-summary:
    needs: minecraft-version-test
    if: always() && github.repository_owner == 'OneLiteFeatherNET'
    runs-on: ubuntu-latest
    steps:
      - name: Test Results Summary
        run: |
          echo "## Minecraft Version Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Version | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY

          # This will be populated by the matrix job results
          if [ "${{ needs.minecraft-version-test.result }}" == "success" ]; then
            echo "| All Tested Versions | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All Minecraft versions were successfully tested:" >> $GITHUB_STEP_SUMMARY
            echo "- Plugin builds without errors" >> $GITHUB_STEP_SUMMARY
            echo "- No critical startup exceptions detected" >> $GITHUB_STEP_SUMMARY
            echo "- Unit tests pass" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Some Versions | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Some tests failed. Check individual job logs for details." >> $GITHUB_STEP_SUMMARY
          fi