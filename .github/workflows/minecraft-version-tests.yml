---
# Minecraft Version Testing Workflow
# 
# This workflow tests the AntiRedstoneClock-Remastered plugin against multiple 
# Minecraft Paper versions to ensure compatibility and catch potential exceptions.
#
# Features:
# - Matrix testing across supported Minecraft versions
# - Plugin build verification 
# - Critical exception detection during startup
# - Unit test execution
# - Artifact collection for debugging
# - Scheduled weekly testing
#
# The workflow helps maintain plugin quality by catching compatibility issues
# early in the development process.

name: Minecraft Version Tests

on:
  push:
    branches: [main, next]
  pull_request:
    branches: [main, next]
  schedule:
    # Run tests weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  minecraft-version-test:
    if: github.repository_owner == 'OneLiteFeatherNET'
    name: Test Plugin on Minecraft ${{ matrix.minecraft-version }}
    runs-on: ubuntu-latest
    env:
      ONELITEFEATHER_MAVEN_USERNAME: ${{ secrets.ONELITEFEATHER_MAVEN_USERNAME }}
      ONELITEFEATHER_MAVEN_PASSWORD: ${{ secrets.ONELITEFEATHER_MAVEN_PASSWORD }}
    strategy:
      fail-fast: false
      matrix:
        # Test on specific Minecraft versions that are actively supported
        minecraft-version:
          - "1.20.6"
          - "1.21"
          - "1.21.3"
          - "1.21.4"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build Plugin
        run: ./gradlew clean build shadowJar

      - name: Test Plugin on Minecraft ${{ matrix.minecraft-version }}
        run: |
          echo "Testing plugin on Minecraft version ${{ matrix.minecraft-version }}"

          # Generate log4j2 configuration for this version
          ./gradlew "createLog4jConfig-${{ matrix.minecraft-version }}"

          # Create test script that uses separated logging
          cat > test_server.sh << 'EOF'
          #!/bin/bash
          set -e

          MC_VERSION="$1"
          echo "Starting Minecraft server version $MC_VERSION with separated logging..."

          # Start the server with timeout and custom logging
          timeout 45s ./gradlew "run-$MC_VERSION" --console=plain --offline &
          SERVER_PID=$!

          # Wait for server startup
          sleep 30

          # Check if server process is still running
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "✅ Server started successfully for MC $MC_VERSION"
            # Stop the server gracefully
            kill $SERVER_PID 2>/dev/null || true
            wait $SERVER_PID 2>/dev/null || true
          else
            echo "⚠️  Server process ended for MC $MC_VERSION"
          fi

          # Check plugin status using separated logs
          ./gradlew "checkPluginStatus-$MC_VERSION"

          # Analyze exception log file
          EXCEPTION_LOG="run-$MC_VERSION/logs/exceptions-$MC_VERSION.log"
          if [ -f "$EXCEPTION_LOG" ]; then
            if [ -s "$EXCEPTION_LOG" ]; then
              echo "❌ Exceptions found in separated log for MC $MC_VERSION:"
              head -10 "$EXCEPTION_LOG"
              
              # Check for critical exceptions
              if grep -E "(ClassNotFoundException|NoSuchMethodError|OutOfMemoryError|LinkageError)" "$EXCEPTION_LOG"; then
                echo "❌ Critical exceptions detected!"
                exit 1
              else
                echo "⚠️  Non-critical exceptions detected"
              fi
            else
              echo "✅ No exceptions logged for MC $MC_VERSION"
            fi
          else
            echo "⚠️  Exception log not found (server may not have started properly)"
          fi

          # Check plugin status log
          STATUS_LOG="run-$MC_VERSION/logs/plugin-status-$MC_VERSION.log"
          if [ -f "$STATUS_LOG" ]; then
            if grep -q "AntiRedstoneClockRemastered" "$STATUS_LOG"; then
              echo "✅ Plugin was loaded for MC $MC_VERSION"
            else
              echo "⚠️  Plugin loading status unclear for MC $MC_VERSION"
            fi
          fi

          echo "✅ Plugin test completed for MC $MC_VERSION"
          EOF

          chmod +x test_server.sh
          ./test_server.sh "${{ matrix.minecraft-version }}"

      - name: Run Unit Tests
        run: ./gradlew test

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: plugin-build-${{ matrix.minecraft-version }}
          path: |
            build/libs/*.jar
            run-${{ matrix.minecraft-version }}/logs/
            run-${{ matrix.minecraft-version }}/log4j2.xml
            build/reports/tests/test/
          retention-days: 7

  test-summary:
    needs: minecraft-version-test
    if: always() && github.repository_owner == 'OneLiteFeatherNET'
    runs-on: ubuntu-latest
    steps:
      - name: Test Results Summary
        run: |
          echo "## Minecraft Version Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Version | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY

          # This will be populated by the matrix job results
          if [ "${{ needs.minecraft-version-test.result }}" == "success" ]; then
            echo "| All Tested Versions | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All Minecraft versions were successfully tested:" >> $GITHUB_STEP_SUMMARY
            echo "- Plugin builds without errors" >> $GITHUB_STEP_SUMMARY
            echo "- No critical startup exceptions detected" >> $GITHUB_STEP_SUMMARY
            echo "- Unit tests pass" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Some Versions | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Some tests failed. Check individual job logs for details." >> $GITHUB_STEP_SUMMARY
          fi